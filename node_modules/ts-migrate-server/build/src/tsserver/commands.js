"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandHasResponse = exports.CommandTypes = void 0;
// Because the `const enum` from 'typescript/lib/protocol' doesn't get inlined with transpile only.
exports.CommandTypes = {
    JsxClosingTag: 'jsxClosingTag',
    Brace: 'brace',
    BraceCompletion: 'braceCompletion',
    GetSpanOfEnclosingComment: 'getSpanOfEnclosingComment',
    Change: 'change',
    Close: 'close',
    /** @deprecated Prefer CompletionInfo -- see comment on CompletionsResponse */
    Completions: 'completions',
    CompletionInfo: 'completionInfo',
    CompletionDetails: 'completionEntryDetails',
    CompileOnSaveAffectedFileList: 'compileOnSaveAffectedFileList',
    CompileOnSaveEmitFile: 'compileOnSaveEmitFile',
    Configure: 'configure',
    Definition: 'definition',
    DefinitionAndBoundSpan: 'definitionAndBoundSpan',
    Implementation: 'implementation',
    Exit: 'exit',
    Format: 'format',
    Formatonkey: 'formatonkey',
    Geterr: 'geterr',
    GeterrForProject: 'geterrForProject',
    SemanticDiagnosticsSync: 'semanticDiagnosticsSync',
    SyntacticDiagnosticsSync: 'syntacticDiagnosticsSync',
    SuggestionDiagnosticsSync: 'suggestionDiagnosticsSync',
    NavBar: 'navbar',
    Navto: 'navto',
    NavTree: 'navtree',
    NavTreeFull: 'navtree-full',
    /** @deprecated */
    Occurrences: 'occurrences',
    DocumentHighlights: 'documentHighlights',
    Open: 'open',
    Quickinfo: 'quickinfo',
    References: 'references',
    Reload: 'reload',
    Rename: 'rename',
    Saveto: 'saveto',
    SignatureHelp: 'signatureHelp',
    Status: 'status',
    TypeDefinition: 'typeDefinition',
    ProjectInfo: 'projectInfo',
    ReloadProjects: 'reloadProjects',
    Unknown: 'unknown',
    OpenExternalProject: 'openExternalProject',
    OpenExternalProjects: 'openExternalProjects',
    CloseExternalProject: 'closeExternalProject',
    UpdateOpen: 'updateOpen',
    GetOutliningSpans: 'getOutliningSpans',
    TodoComments: 'todoComments',
    Indentation: 'indentation',
    DocCommentTemplate: 'docCommentTemplate',
    CompilerOptionsForInferredProjects: 'compilerOptionsForInferredProjects',
    GetCodeFixes: 'getCodeFixes',
    GetCombinedCodeFix: 'getCombinedCodeFix',
    ApplyCodeActionCommand: 'applyCodeActionCommand',
    GetSupportedCodeFixes: 'getSupportedCodeFixes',
    GetApplicableRefactors: 'getApplicableRefactors',
    GetEditsForRefactor: 'getEditsForRefactor',
    OrganizeImports: 'organizeImports',
    GetEditsForFileRename: 'getEditsForFileRename',
    ConfigurePlugin: 'configurePlugin',
};
const COMMAND_HAS_RESPONSE = {
    [exports.CommandTypes.JsxClosingTag]: true,
    [exports.CommandTypes.Brace]: true,
    [exports.CommandTypes.BraceCompletion]: false,
    [exports.CommandTypes.GetSpanOfEnclosingComment]: false,
    [exports.CommandTypes.Change]: false,
    [exports.CommandTypes.Close]: false,
    [exports.CommandTypes.Completions]: true,
    [exports.CommandTypes.CompletionInfo]: true,
    [exports.CommandTypes.CompletionDetails]: true,
    [exports.CommandTypes.CompileOnSaveAffectedFileList]: true,
    [exports.CommandTypes.CompileOnSaveEmitFile]: false,
    [exports.CommandTypes.Configure]: true,
    [exports.CommandTypes.Definition]: true,
    [exports.CommandTypes.DefinitionAndBoundSpan]: true,
    [exports.CommandTypes.Implementation]: true,
    [exports.CommandTypes.Exit]: false,
    [exports.CommandTypes.Format]: true,
    [exports.CommandTypes.Formatonkey]: false,
    [exports.CommandTypes.Geterr]: false,
    [exports.CommandTypes.GeterrForProject]: false,
    [exports.CommandTypes.SemanticDiagnosticsSync]: true,
    [exports.CommandTypes.SyntacticDiagnosticsSync]: true,
    [exports.CommandTypes.SuggestionDiagnosticsSync]: true,
    [exports.CommandTypes.NavBar]: true,
    [exports.CommandTypes.Navto]: true,
    [exports.CommandTypes.NavTree]: true,
    [exports.CommandTypes.NavTreeFull]: false,
    [exports.CommandTypes.Occurrences]: true,
    [exports.CommandTypes.DocumentHighlights]: true,
    [exports.CommandTypes.Open]: false,
    [exports.CommandTypes.Quickinfo]: true,
    [exports.CommandTypes.References]: true,
    [exports.CommandTypes.Reload]: true,
    [exports.CommandTypes.Rename]: true,
    [exports.CommandTypes.Saveto]: false,
    [exports.CommandTypes.SignatureHelp]: true,
    [exports.CommandTypes.Status]: true,
    [exports.CommandTypes.TypeDefinition]: true,
    [exports.CommandTypes.ProjectInfo]: true,
    [exports.CommandTypes.ReloadProjects]: false,
    [exports.CommandTypes.Unknown]: false,
    [exports.CommandTypes.OpenExternalProject]: true,
    [exports.CommandTypes.OpenExternalProjects]: true,
    [exports.CommandTypes.CloseExternalProject]: true,
    [exports.CommandTypes.UpdateOpen]: false,
    [exports.CommandTypes.GetOutliningSpans]: true,
    [exports.CommandTypes.TodoComments]: true,
    [exports.CommandTypes.Indentation]: true,
    [exports.CommandTypes.DocCommentTemplate]: true,
    [exports.CommandTypes.CompilerOptionsForInferredProjects]: false,
    [exports.CommandTypes.GetCodeFixes]: true,
    [exports.CommandTypes.GetCombinedCodeFix]: true,
    [exports.CommandTypes.ApplyCodeActionCommand]: true,
    [exports.CommandTypes.GetSupportedCodeFixes]: true,
    [exports.CommandTypes.GetApplicableRefactors]: true,
    [exports.CommandTypes.GetEditsForRefactor]: true,
    [exports.CommandTypes.OrganizeImports]: true,
    [exports.CommandTypes.GetEditsForFileRename]: true,
    [exports.CommandTypes.ConfigurePlugin]: true,
};
function commandHasResponse(command) {
    // @ts-ignore ts-migrate(7053) FIXME: Property '[CommandTypes.SelectionRange]' does not ... Remove this comment to see the full error message
    return COMMAND_HAS_RESPONSE[command];
}
exports.commandHasResponse = commandHasResponse;
//# sourceMappingURL=commands.js.map